{
  "hints": {
    "createApplication(uint64)void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "createMembershipNft(string,uint64,string,string)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getMembership(pay,axfer)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "cancelMembership()void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "membershipPrice": {
          "type": "uint64",
          "key": "membershipPrice"
        },
        "membershipNft": {
          "type": "uint64",
          "key": "membershipNft"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 2
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDk="
  },
  "contract": {
    "name": "NftMembershipApp",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [
          {
            "name": "membershipPrice",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "createMembershipNft",
        "desc": "A method that creates the Membership NFT",
        "args": [
          {
            "name": "name",
            "type": "string"
          },
          {
            "name": "total",
            "type": "uint64"
          },
          {
            "name": "unitName",
            "type": "string"
          },
          {
            "name": "assetUrl",
            "type": "string"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "getMembership",
        "desc": "A method that allows a user to purchase a membership",
        "args": [
          {
            "name": "payment",
            "type": "pay"
          },
          {
            "name": "nftOptIn",
            "type": "axfer"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "cancelMembership",
        "desc": "A method that allows a user to cancel their membership",
        "args": [],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}